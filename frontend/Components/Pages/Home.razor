@page "/"
@using Frontend.Models
@using Frontend.Components.Controls
@inject HttpClient httpClient

<PageTitle>JBioFramework</PageTitle>
<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.h5" Class="mb-2">Project Purpose</MudText>
            <MudText Typo="Typo.body1" Class="mb-4">
                JBioFramework (JBF) is an open-source suite of analytical simulations of protein structure
                and function. It provides students with access to tools like 1D electrophoresis,
                2D electrophoresis, Tandem Mass Spectrometry, chemical drawing, and an upcoming simulation
                of peptide separation by Reversed Phase Liquid Chromatography (RPLC).
            </MudText>
            <MudText Typo="Typo.body1" Class="mb-4">
                Originally built in Java in 1997, JBF has since been converted into a modern web application
                with a JavaScript front-end and Python back-end. It is used in biochemistry, bioinformatics,
                and chemistry education at RIT and beyond.
            </MudText>
            <MudText Typo="Typo.h5" Class="mb-2">Commercial Use</MudText>
            <MudText Typo="Typo.body1" Class="mb-4">
                Use by individual <strong>students and teachers</strong> is <strong>free of charge</strong>.
                Educational presentations with <strong>fewer than 50 attendees</strong> are also free,
                while those with <strong>50 to 200 attendees</strong> require a <strong>$100 license fee</strong>.
                Presentations with <strong>more than 200 attendees</strong> require a <strong>$500 license fee</strong>.
                <strong> Online publication</strong> requires a <strong>negotiated commercial license</strong>.
                <strong> Unauthorized use or distribution</strong> constitutes <strong>piracy</strong> and may result in
                legal
                action.
            </MudText>
            <MudText Typo="Typo.body1" Class="mb-4">
                For any inquiries, please contact Dr. Paul Craig at <a
                    href='mailto:pac8612@rit.edu'>pac8612@rit.edu</a>.
            </MudText>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.h5" Class="mb-2">Project Sponsors</MudText>
            @if (sponsors.Count == 0)
            {
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" Class="my-4" />
            }
            else
            {
                @foreach (var profile in sponsors)
                {
                    <ProfileControl profile="@profile" />
                }
            }
        </MudItem>
    </MudGrid>

    <MudText Typo="Typo.h5" Class="mb-2 mt-4">Project Coaches</MudText>
    @if (coaches.Count == 0)
    {
        <MudText Typo="Typo.body1">No coaches available.</MudText>
    }
    else
    {
        <MudGrid>
            @foreach (var profile in coaches)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <ProfileControl profile="@profile" />
                </MudItem>
            }
        </MudGrid>
    }

    <MudText Typo="Typo.h5" Class="mb-2 mt-4">Current Developers</MudText>
    @if (currentDevelopers.Count == 0)
    {
        <MudText Typo="Typo.body1">No current developers.</MudText>
    }
    else
    {
        <MudGrid>
            @foreach (var profile in currentDevelopers)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <ProfileControl profile="@profile" />
                </MudItem>
            }
        </MudGrid>
    }

    <MudText Typo="Typo.h5" Class="mb-2 mt-4">Past Developers</MudText>
    @if (pastDevelopers.Count == 0)
    {
        <MudText Typo="Typo.body1">No past developers.</MudText>
    }
    else
    {
        <MudGrid>
            @foreach (var profile in pastDevelopers)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <ProfileControl profile="@profile" />
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>


@code {
    private List<Profile> sponsors = new();
    private List<Profile> coaches = new();
    private List<Profile> currentDevelopers = new();
    private List<Profile> pastDevelopers = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var profilesJson = await httpClient.GetStringAsync("assets/profiles/profiles.json");
            var allProfiles = System.Text.Json.JsonSerializer.Deserialize<List<Profile>>(profilesJson) ?? new List<Profile>();

            sponsors = allProfiles.Where(p => p.Role == "Sponsor").ToList();
            coaches = allProfiles.Where(p => p.Role == "Coach").ToList();
            currentDevelopers = allProfiles.Where(p => p.Role == "Developer" && p.Current).ToList();
            pastDevelopers = allProfiles.Where(p => p.Role == "Developer" && !p.Current).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading profiles: {ex.Message}");
        }
    }

}